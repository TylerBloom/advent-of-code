pub use crate::solution::Solution;

use std::collections::HashMap;

pub fn run_solution(data: String) {
    let mut solver = Day8::parse_input(data);
    println!("Day 8 Part 1 Solution: {} ", solver.solve_part_one());
    println!("Day 8 Part 2 Solution: {} ", solver.solve_part_two());
}

#[derive(Debug)]
struct SegmentMap {
    map: HashMap<String, u64>,
}

impl SegmentMap {
    pub fn new(data: &Vec<String>) -> Self {
        let mut map = HashMap::with_capacity(7);
        SegmentMap { map }
    }
    
    pub fn map(&self, data: String) -> u64 {
        self.map[data]
    }
}

pub struct Day8 {
    input: Vec<Vec<String>>,
    output: Vec<Vec<String>>,
}

impl Solution<u64> for Day8 {
    fn parse_input(data: String) -> Self {
        let parsed: Vec<&str> = data.split("\n").collect();
        let mut input: Vec<Vec<String>> = Vec::with_capacity(parsed.len());
        let mut output: Vec<Vec<String>> = Vec::with_capacity(parsed.len());
        for val in parsed {
            if val.is_empty() {
                continue;
            }
            for (i, entry) in val.split("|").enumerate() {
                if entry.is_empty() {
                    continue;
                }
                if i == 0 {
                    let mut sorted_entries: Vec<String> = Vec::new();
                    for v in entry.split(" ").filter(|num| !num.is_empty()) {
                        let mut num = v.chars().collect::<Vec<_>>();
                        num.sort();
                        sorted_entries.push( num.iter().collect::<String>() );
                    }
                    input.push(sorted_entries);
                } else {
                    let vals = entry
                        .split(" ")
                        .filter(|num| !num.is_empty())
                        .map(|num| num.to_string())
                        .collect::<Vec<_>>();
                    output.push(vals);
                }
            }
        }
        Day8 { input, output }
    }

    fn solve_part_one(&mut self) -> u64 {
        self.output
            .iter()
            .map(|v| {
                v.iter()
                    .filter(|val| match val.len() {
                        2 | 3 | 4 | 7 => true,
                        _ => false,
                    })
                    .count() as u64
            })
            .sum()
    }

    fn solve_part_two(&mut self) -> u64 {
        let mut digest: Vec<u64> = Vec::with_capacity(self.input.len());
        let mut map: SegmentMap;
        for (i, entry) in self.input.iter().enumerate() {
            map = entry
                .iter()
                .map(|val| match val.len() {
                    2 => SegmentMap::construct_one(&val),
                    3 => SegmentMap::construct_seven(&val),
                    4 => SegmentMap::construct_four(&val),
                    7 => SegmentMap::construct_eight(&val),
                    _ => SegmentMap::new(),
                })
                .reduce(|a, b| a.compose(&b))
                .unwrap();
            if map.len() != 7 {
                panic!("{:?} found unknowable entry.", entry);
            } else {
                println!( "Final map: {:?}", map);
            }
            println!( "Mapping {:?}", self.output[i] );
            digest.push(
                self.output[i]
                    .iter()
                    .map(|e| segment_to_number(&map.map(e)))
                    .rev()
                    .enumerate()
                    .map(|(i, n)| 10_u64.pow(i as u32) * n)
                    .sum(),
            );
        }
        digest.iter().sum()
    }
}

#[cfg(test)]
mod tests {

    use std::fs::read_to_string;

    use super::{Day8, Solution};

    #[test]
    fn test_part_one() {
        let input = String::from("be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe\nedbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gc\nfgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbg\nfbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cb\naecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgea\nfgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcb\ndbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfe\nbdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgef\negadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgb\ngcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce");
        let mut solver = Day8::parse_input(input);
        assert_eq!(solver.solve_part_one(), 26);
    }

    #[test]
    fn test_part_two_simple() {
        let input = String::from(
            "acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab | cdfeb fcadb cdfeb cdbaf",
        );
        let mut solver = Day8::parse_input(input);
        assert_eq!(solver.solve_part_two(), 5353);
    }

    #[test]
    fn test_part_two() {
        let input = String::from("be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe\nedbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gc\nfgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbg\nfbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cb\naecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgea\nfgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcb\ndbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfe\nbdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgef\negadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgb\ngcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce");
        let mut solver = Day8::parse_input(input);
        assert_eq!(solver.solve_part_two(), 61229);
    }

    // Will be added after solution is found
    #[test]
    fn known_part_one_solution() {
        let mut solver = Day8::parse_input(read_to_string("data/day_08.txt").unwrap());
        assert_eq!(solver.solve_part_one(), 352);
    }

    #[test]
    fn known_part_two_solution() {
        let mut solver = Day8::parse_input(read_to_string("data/day_08.txt").unwrap());
        //assert_eq!(solver.solve_part_two(), 99634572);
    }
}
